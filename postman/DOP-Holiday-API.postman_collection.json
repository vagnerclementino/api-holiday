{
  "info": {
    "_postman_id": "dop-holiday-api-master-collection",
    "name": "\ud83c\udfaf DOP Holiday API - Master Collection",
    "description": "**Complete unified collection for Data-Oriented Programming Holiday API**\n\n## \ud83d\ude80 Features Tested:\n- \u2705 **CRUD Operations**: Create, Read, Update, Delete holidays\n- \u2705 **DOP Types**: Fixed, Observed, Moveable, MoveableFromBase\n- \u2705 **Validation**: Input validation and error handling\n- \u2705 **Filtering**: Country, state, city, type, date range filters\n- \u2705 **Edge Cases**: Invalid data, boundary conditions\n- \u2705 **Performance**: Bulk operations and response times\n\n## \ud83c\udfd7\ufe0f DOP Architecture Covered:\n1. **FixedHoliday** - Fixed date holidays (Christmas, New Year)\n2. **ObservedHoliday** - Holidays with observed dates and mondayisation\n3. **MoveableHoliday** - Calculated holidays (Easter, Thanksgiving)\n4. **MoveableFromBaseHoliday** - Holidays calculated from other holidays\n\n## \ud83d\udcca Test Categories:\n- **\ud83d\udfe2 Basic CRUD** - Standard operations\n- **\ud83d\udd35 Advanced Filtering** - Complex queries\n- **\ud83d\udfe1 Validation Tests** - Error scenarios\n- **\ud83d\udfe0 DOP Specific** - Data-oriented patterns\n- **\ud83d\udd34 Performance** - Load and stress tests\n\n## \ud83c\udf0d Environments:\n- **Local Development**: http://localhost:8080\n- **Docker**: http://localhost:8080\n- **Production**: (configure as needed)\n\n---\n*Generated by DOP Holiday API Master Collection Builder*\n\n**Last Updated**: 2025-08-17 20:40:10",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "dop-holiday-api"
  },
  "item": [
    {
      "name": "\ud83d\udfe2 1. Basic CRUD Operations",
      "description": "Standard Create, Read, Update, Delete operations for holidays",
      "item": [
        {
          "name": "\ud83c\udfaf Observed Holidays (New!)",
          "item": [
            {
              "name": "Create Christmas Observed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Response has id\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.environment.set('lastObservedHolidayId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"Has observed field (ObservedHoliday)\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('observed');",
                      "    pm.expect(jsonData.observed).to.have.property('date');",
                      "    pm.expect(jsonData.observed).to.have.property('weekday');",
                      "});",
                      "",
                      "pm.test(\"Holiday name contains Observed\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.name).to.include('Observed');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"Christmas Day Observed 2024\",\n  \"description\": \"Christmas falling on Wednesday, observed on Thursday due to company policy\",\n  \"date\": \"2024-12-25\",\n  \"observed\": \"2024-12-26\",\n  \"mondayisation\": true,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Independence Day Observed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Has observed field\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('observed');",
                      "});",
                      "",
                      "pm.test(\"Independence Day created\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.name).to.include('Independence');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"Independence Day Observed\",\n  \"description\": \"July 4th falling on Thursday, observed on Friday for long weekend\",\n  \"date\": \"2024-07-04\",\n  \"observed\": \"2024-07-05\",\n  \"mondayisation\": false,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Memorial Day with Mondayisation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Memorial Day with mondayisation\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.name).to.include('Memorial');",
                      "    pm.expect(jsonData).to.have.property('observed');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"Memorial Day Observed\",\n  \"description\": \"Memorial Day with mondayisation rule - always observed on Monday\",\n  \"date\": \"2024-05-27\",\n  \"observed\": \"2024-05-27\",\n  \"mondayisation\": true,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "response": []
            }
          ],
          "category": "core-api"
        },
        {
          "name": "\ud83d\udd27 API Health & Info",
          "item": [
            {
              "name": "Health Check",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"API is UP\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.status).to.eql('UP');",
                      "});",
                      "",
                      "pm.test(\"MongoDB is connected\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.components.mongo.status).to.eql('UP');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/actuator/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "actuator",
                    "health"
                  ]
                }
              },
              "response": []
            }
          ],
          "category": "core-api"
        },
        {
          "name": "Get All Holidays",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Contains all 4 DOP types\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var hasFixed = jsonData.some(h => !h.hasOwnProperty('observed'));",
                  "    var hasObserved = jsonData.some(h => h.hasOwnProperty('observed'));",
                  "    pm.expect(hasFixed).to.be.true;",
                  "    pm.expect(hasObserved).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "retrieval"
        },
        {
          "name": "Get Fixed Holiday by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/holidays/{{lastFixedHolidayId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays",
                "{{lastFixedHolidayId}}"
              ]
            }
          },
          "response": [],
          "category": "retrieval"
        },
        {
          "name": "Get Observed Holiday by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/holidays/{{lastObservedHolidayId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays",
                "{{lastObservedHolidayId}}"
              ]
            }
          },
          "response": [],
          "category": "retrieval"
        },
        {
          "name": "Get Moveable Holiday by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/holidays/{{lastMoveableHolidayId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays",
                "{{lastMoveableHolidayId}}"
              ]
            }
          },
          "response": [],
          "category": "retrieval"
        },
        {
          "name": "Get MoveableFromBase Holiday by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/holidays/{{lastMoveableFromBaseId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays",
                "{{lastMoveableFromBaseId}}"
              ]
            }
          },
          "response": [],
          "category": "retrieval"
        },
        {
          "name": "Create Easter Sunday",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"MoveableHoliday created\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.include('Easter');",
                  "    pm.environment.set('lastMoveableHolidayId', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"Moveable\",\n  \"name\": \"Easter Sunday 2024\",\n  \"description\": \"Christian holiday celebrating the resurrection of Jesus Christ\",\n  \"date\": \"2024-03-31\",\n  \"knownHoliday\": \"EASTER\",\n  \"mondayisation\": false,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"BR\",\n      \"name\": \"Brazil\"\n    }\n  ],\n  \"holidayType\": \"RELIGIOUS\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "moveable"
        },
        {
          "name": "Create Thanksgiving US",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"Moveable\",\n  \"name\": \"Thanksgiving US Moveable\",\n  \"description\": \"US Thanksgiving calculated holiday\",\n  \"date\": \"2024-11-28\",\n  \"knownHoliday\": \"THANKSGIVING_US\",\n  \"mondayisation\": false,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "moveable"
        },
        {
          "name": "Create Christmas Observed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Has observed field (ObservedHoliday)\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('observed');",
                  "    pm.environment.set('lastObservedHolidayId', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"Christmas Day Observed 2024\",\n  \"description\": \"Christmas falling on Wednesday, observed on Thursday\",\n  \"date\": \"2024-12-25\",\n  \"observed\": \"2024-12-26\",\n  \"mondayisation\": true,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "observed"
        },
        {
          "name": "Create Independence Day Observed",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"Independence Day Observed\",\n  \"description\": \"July 4th observed on Friday for long weekend\",\n  \"date\": \"2024-07-04\",\n  \"observed\": \"2024-07-05\",\n  \"mondayisation\": false,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "observed"
        },
        {
          "name": "Create Day After Independence",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"MoveableFromBase created with offset\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.include('After');",
                  "    pm.environment.set('lastMoveableFromBaseId', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"MoveableFromBase\",\n  \"name\": \"Day After Independence\",\n  \"description\": \"Holiday derived from Independence Day with 1 day offset\",\n  \"date\": \"2024-09-08\",\n  \"knownHoliday\": \"INDEPENDENCE_DAY_BRAZIL\",\n  \"dayOffset\": 1,\n  \"mondayisation\": false,\n  \"baseHoliday\": {\n    \"holidayVariant\": \"FixedHoliday\",\n    \"name\": \"Independence Day Brazil Base\",\n    \"description\": \"Brazil Independence Day as base\",\n    \"date\": \"2024-09-07\",\n    \"day\": 7,\n    \"month\": \"SEPTEMBER\",\n    \"localities\": [\n      {\n        \"localityType\": \"Country\",\n        \"code\": \"BR\",\n        \"name\": \"Brazil\"\n      }\n    ],\n    \"type\": \"NATIONAL\"\n  },\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"BR\",\n      \"name\": \"Brazil\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "moveable-from-base"
        },
        {
          "name": "Create Two Days Before Christmas",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"MoveableFromBase\",\n  \"name\": \"Two Days Before Christmas\",\n  \"description\": \"Holiday derived from Christmas with -2 days offset\",\n  \"date\": \"2024-12-23\",\n  \"knownHoliday\": \"CHRISTMAS\",\n  \"dayOffset\": -2,\n  \"mondayisation\": true,\n  \"baseHoliday\": {\n    \"holidayVariant\": \"FixedHoliday\",\n    \"name\": \"Christmas Day Base\",\n    \"description\": \"Christmas as base holiday\",\n    \"date\": \"2024-12-25\",\n    \"day\": 25,\n    \"month\": \"DECEMBER\",\n    \"localities\": [\n      {\n        \"localityType\": \"Country\",\n        \"code\": \"US\",\n        \"name\": \"United States\"\n      }\n    ],\n    \"type\": \"RELIGIOUS\"\n  },\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"COMMERCIAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "moveable-from-base"
        }
      ]
    },
    {
      "name": "\ud83d\udd35 2. Advanced Filtering & Retrieval",
      "description": "Complex queries, filtering, and data retrieval patterns",
      "item": [
        {
          "name": "\ud83d\udd0d Retrieve Holidays",
          "item": [
            {
              "name": "Get All Holidays",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Contains both Fixed and Observed holidays\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var hasFixed = jsonData.some(h => !h.hasOwnProperty('observed'));",
                      "    var hasObserved = jsonData.some(h => h.hasOwnProperty('observed'));",
                      "    pm.expect(hasFixed).to.be.true;",
                      "    pm.expect(hasObserved).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Fixed Holiday by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/holidays/{{lastFixedHolidayId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays",
                    "{{lastFixedHolidayId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Observed Holiday by ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has observed field\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('observed');",
                      "    pm.expect(jsonData.observed).to.have.property('date');",
                      "    pm.expect(jsonData.observed).to.have.property('weekday');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/holidays/{{lastObservedHolidayId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays",
                    "{{lastObservedHolidayId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Filter Observed Holidays Only",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All results have observed field\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(function(holiday) {",
                      "            if (holiday.name.includes('Observed')) {",
                      "                pm.expect(holiday).to.have.property('observed');",
                      "            }",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "response": []
            }
          ],
          "category": "core-api"
        }
      ]
    },
    {
      "name": "\ud83d\udfe1 3. Validation & Error Handling",
      "description": "Input validation, error scenarios, and boundary conditions",
      "item": [
        {
          "name": "\u274c DOP Validation Tests",
          "item": [
            {
              "name": "Fixed: Invalid February 31st",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400 or 500 (validation error)\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                      "});",
                      "",
                      "pm.test(\"Error message mentions February validation\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('FEBRUARY');",
                      "    pm.expect(jsonData.message).to.include('31');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Fixed\",\n  \"name\": \"Invalid Holiday - Feb 31\",\n  \"description\": \"This should fail - February 31st does not exist\",\n  \"day\": 31,\n  \"month\": \"FEBRUARY\",\n  \"year\": 2024,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"COMMERCIAL\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Observed: Invalid Date February 30th",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400 or 500 (validation error)\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                      "});",
                      "",
                      "pm.test(\"Error message mentions invalid date\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('Invalid date');",
                      "    pm.expect(jsonData.message).to.include('FEBRUARY 30');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"Invalid Observed Holiday\",\n  \"description\": \"This should fail - February 30th does not exist\",\n  \"date\": \"2024-02-30\",\n  \"observed\": \"2024-03-01\",\n  \"mondayisation\": false,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "response": []
            }
          ],
          "category": "core-api"
        },
        {
          "name": "Fixed: Invalid February 31st",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 500 (validation error)\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions February validation\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('FEBRUARY');",
                  "    pm.expect(jsonData.message).to.include('31');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"Fixed\",\n  \"name\": \"Invalid Holiday - Feb 31\",\n  \"description\": \"This should fail - February 31st does not exist\",\n  \"day\": 31,\n  \"month\": \"FEBRUARY\",\n  \"year\": 2024,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"COMMERCIAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "validation"
        },
        {
          "name": "Observed: Invalid Date February 30th",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 500 (validation error)\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions invalid date\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Invalid date');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"Invalid Observed Holiday\",\n  \"description\": \"This should fail - February 30th does not exist\",\n  \"date\": \"2024-02-30\",\n  \"observed\": \"2024-03-01\",\n  \"mondayisation\": false,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "validation"
        },
        {
          "name": "Moveable: Invalid KnownHoliday",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 500 (validation error)\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions invalid enum\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('not one of the values accepted');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"Moveable\",\n  \"name\": \"Invalid Moveable Holiday\",\n  \"description\": \"This should fail - INVALID_HOLIDAY is not a valid KnownHoliday\",\n  \"date\": \"2024-03-31\",\n  \"knownHoliday\": \"INVALID_HOLIDAY\",\n  \"mondayisation\": false,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"COMMERCIAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "response": [],
          "category": "validation"
        }
      ]
    },
    {
      "name": "\ud83d\udfe0 4. DOP-Specific Types",
      "description": "Data-Oriented Programming specific holiday types and patterns",
      "item": [
        {
          "name": "\ud83d\udcc5 Fixed Holidays",
          "description": "Fixed date holidays (Christmas, New Year, etc.)",
          "item": [
            {
              "name": "\u2705 Fixed Holidays (Valid)",
              "item": [
                {
                  "name": "Create Christmas Day 2024",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                          "});",
                          "",
                          "pm.test(\"Response has id\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData).to.have.property('id');",
                          "    pm.environment.set('lastFixedHolidayId', jsonData.id);",
                          "});",
                          "",
                          "pm.test(\"Holiday name is correct\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.name).to.include('Christmas');",
                          "});",
                          "",
                          "pm.test(\"No observed field (Fixed Holiday)\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData).to.not.have.property('observed');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"type\": \"Fixed\",\n  \"name\": \"Christmas Day 2024\",\n  \"description\": \"Christian holiday celebrating the birth of Jesus Christ\",\n  \"day\": 25,\n  \"month\": \"DECEMBER\",\n  \"year\": 2024,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"US\",\n      \"name\": \"United States\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/api/holidays",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "holidays"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create New Year (Recurring)",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"type\": \"Fixed\",\n  \"name\": \"New Year Recurring\",\n  \"description\": \"First day of the year - recurring every year\",\n  \"day\": 1,\n  \"month\": \"JANUARY\",\n  \"year\": null,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"BR\",\n      \"name\": \"Brazil\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/api/holidays",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "holidays"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "category": "core-api"
            },
            {
              "name": "Create Fixed Holiday - Christmas 2024",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{contentType}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Fixed\",\n  \"name\": \"Christmas Day\",\n  \"description\": \"Christmas celebration\",\n  \"day\": 25,\n  \"month\": \"DECEMBER\",\n  \"year\": {{currentYear}},\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"{{testCountry}}\",\n      \"name\": \"Brazil\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has holiday ID', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.environment.set('lastFixedHolidayId', response.id);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "\ud83d\udc41\ufe0f Observed Holidays",
          "description": "Holidays with observed dates and mondayisation rules",
          "item": [
            {
              "name": "Create Observed Holiday - New Year Observed",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{contentType}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Observed\",\n  \"name\": \"New Year's Day (Observed)\",\n  \"description\": \"New Year with mondayisation\",\n  \"baseDate\": \"{{currentYear}}-01-01\",\n  \"observedDate\": \"{{currentYear}}-01-02\",\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"{{testCountry}}\",\n      \"name\": \"Brazil\"\n    }\n  ],\n  \"holidayType\": \"NATIONAL\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has observed date', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.environment.set('lastObservedHolidayId', response.id);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "\ud83d\udd04 Moveable Holidays",
          "description": "Calculated holidays (Easter, Thanksgiving, etc.)",
          "item": [
            {
              "name": "Create Moveable Holiday - Easter 2024",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{contentType}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Moveable\",\n  \"name\": \"Easter Sunday\",\n  \"description\": \"Easter celebration\",\n  \"year\": {{currentYear}},\n  \"moveableType\": \"EASTER\",\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"{{testCountry}}\",\n      \"name\": \"Brazil\"\n    }\n  ],\n  \"holidayType\": \"RELIGIOUS\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Easter date is calculated', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.environment.set('lastMoveableHolidayId', response.id);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "\ud83d\udd17 Moveable From Base Holidays",
          "description": "Holidays calculated from other holidays",
          "item": [
            {
              "name": "Create Moveable From Base - Good Friday",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{contentType}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"MoveableFromBase\",\n  \"name\": \"Good Friday\",\n  \"description\": \"Friday before Easter\",\n  \"year\": {{currentYear}},\n  \"baseHolidayType\": \"EASTER\",\n  \"offsetDays\": -2,\n  \"localities\": [\n    {\n      \"localityType\": \"Country\",\n      \"code\": \"{{testCountry}}\",\n      \"name\": \"Brazil\"\n    }\n  ],\n  \"holidayType\": \"RELIGIOUS\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/holidays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "holidays"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Good Friday calculated from Easter', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.environment.set('lastMoveableFromBaseId', response.id);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "\ud83d\udd34 5. Performance & Load Tests",
      "description": "Performance testing, bulk operations, and stress tests",
      "item": [
        {
          "name": "Performance Test - List All Holidays",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/holidays",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "holidays"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is less than 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}